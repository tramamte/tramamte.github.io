<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Awesome Patrick</title>
    <link>https://tramamte.github.io/</link>
    <description>Recent content on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2018 Patrick Yu&lt;br&gt;All rights reserved.</copyright>
    <lastBuildDate>Fri, 15 Jun 2018 12:18:07 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>if Statement</title>
      <link>https://tramamte.github.io/2018/06/15/if-statement/</link>
      <pubDate>Fri, 15 Jun 2018 12:18:07 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/15/if-statement/</guid>
      <description>Go의 if 조건문은 조건에 괄호(())를 쓰지 않아도 된다는 점을 제외하면 C, Java 등 다른 언어의 그것과 유사하다. 물론 조건에 괄호를 쓰는 것도 가능하며, 복잡한 조건</description>
    </item>
    
    <item>
      <title>Fun - Packages &amp; Import</title>
      <link>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</link>
      <pubDate>Thu, 14 Jun 2018 18:24:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</guid>
      <description>Packages, Import와 관련된 글입니다. 이제 겨우 타입 정도를 다룬 마당에 굉장히 이른 감은 있습니다. Go도 당연히 다른 언어처럼 작성한 코드의 재사용이 가능하다. 쉬</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 1</title>
      <link>https://tramamte.github.io/2018/06/12/hanks-oven-01/</link>
      <pubDate>Tue, 12 Jun 2018 12:15:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/hanks-oven-01/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 바닥에 자갈을 깔아둔지라 우선 자갈을 모두 걷어내고 기초 공사 준비 땅을 파고 나무판으로 막아 거푸집 완성. 안에는 땅 파</description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://tramamte.github.io/2018/06/12/pointers/</link>
      <pubDate>Tue, 12 Jun 2018 12:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/pointers/</guid>
      <description>Go의 포인터는 생김과 사용법이 C의 그것과 매우 유사하다. 먼저 포인터에 대한 규정을 살펴보면 다음과 같다. PointerType = &amp;#34;*&amp;#34; BaseType . BaseType = Type . C에서와 같이 타입 앞에 * (as</description>
    </item>
    
    <item>
      <title>Import</title>
      <link>https://tramamte.github.io/2018/06/08/import/</link>
      <pubDate>Fri, 08 Jun 2018 18:58:47 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/08/import/</guid>
      <description>외부 패키지에서 제공하는 기능을 사용하기 위해 Go에서는 import 명령을 사용한다. 작성 규칙은 다음과 같다. ImportDecl = &amp;#34;import&amp;#34; ( ImportSpec | &amp;#34;(&amp;#34; { ImportSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ImportSpec = [ &amp;#34;.&amp;#34; | PackageName ] ImportPath . ImportPath =</description>
    </item>
    
    <item>
      <title>jBPM Maven Sample 오류 해결</title>
      <link>https://tramamte.github.io/2018/06/07/resolve-sample-error/</link>
      <pubDate>Thu, 07 Jun 2018 23:11:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/resolve-sample-error/</guid>
      <description>jBPM / Drools 개발환경 구성 방법에 따라 Eclipse에 jBPM/Drools 환경 구성 후 새로운 jBPM project를 maven 기반으로 생성하고 실행하면 오류가 발생한다. jBPM project 생성 절차 File - New</description>
    </item>
    
    <item>
      <title>Fun - Constants</title>
      <link>https://tramamte.github.io/2018/06/07/fun-constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:32:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/fun-constants/</guid>
      <description>Constants와 관련된 글입니다. 상수의 타입과 한계 이 글에서 한 것처럼 reflect 패키지를 이용해 타입을 명시하지 않은 상수의 타입에 대해 알아보자. package main import &amp;#34;fmt&amp;#34; import &amp;#34;reflect&amp;#34;</description>
    </item>
    
    <item>
      <title>Constants</title>
      <link>https://tramamte.github.io/2018/06/07/constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:20:18 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/constants/</guid>
      <description>상수를 선언하는 방법은 &amp;ldquo;var&amp;rdquo; 대신 &amp;ldquo;const&amp;ldquo;를 사용한다는 점을 제외하면 변수를 선언하는 방법과 유사하다. ConstDecl = &amp;#34;const&amp;#34; ( ConstSpec | &amp;#34;(&amp;#34; { ConstSpec &amp;#34;;&amp;#34; }</description>
    </item>
    
    <item>
      <title>Draft, Future 포스트 확인 방법</title>
      <link>https://tramamte.github.io/2018/06/07/draft-future/</link>
      <pubDate>Thu, 07 Jun 2018 12:21:15 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/draft-future/</guid>
      <description>Draft 확인 $ hugo server -D Future 포스트 확인 $ hugo server -F</description>
    </item>
    
    <item>
      <title>MS의 천하통일</title>
      <link>https://tramamte.github.io/2018/06/05/ms-eats-github/</link>
      <pubDate>Tue, 05 Jun 2018 18:05:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/ms-eats-github/</guid>
      <description>뉴스 기사로 볼 때와는 또 다른 충격과 공포! MS 천지를 먹다 개발자의 꿈과 희망 MS MS가 Apple도 먹고, Google도 먹고, 토발즈도 영입하고&amp;hellip</description>
    </item>
    
    <item>
      <title>Fun - Variables &amp; Types</title>
      <link>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</link>
      <pubDate>Tue, 05 Jun 2018 12:55:40 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</guid>
      <description>Variables, Types와 관련된 글입니다. Variables 포스트에서 살펴 본 것처럼 Go는 변수를 선언할 때 초기값을 같이 입력하면 굳이 타입을 명시하지 않아도 된다. var i = 1 f := 3.14 c</description>
    </item>
    
    <item>
      <title>Types</title>
      <link>https://tramamte.github.io/2018/06/05/types/</link>
      <pubDate>Tue, 05 Jun 2018 12:14:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/types/</guid>
      <description>Go의 타입 작성법은 다음과 같다. Type = TypeName | TypeLit | &amp;#34;(&amp;#34; Type &amp;#34;)&amp;#34; . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . 나머지는 차차 보도록 하고, 여기서는 predefined identifier 중 types (</description>
    </item>
    
    <item>
      <title>jBPM / Drools 개발환경 구성</title>
      <link>https://tramamte.github.io/2018/06/04/eclipse-install/</link>
      <pubDate>Mon, 04 Jun 2018 13:56:33 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/04/eclipse-install/</guid>
      <description>1. Oracle JDK 설치 Java SE 8 버전 추천 2. Eclipse 설치 Eclipse IDE for Java EE Developers 받아서 압축 해제 3. Runtime 설치 Drools에서 Final 버전 내려받아 적당한 위치에 압축 해제 jBPM에서 Final-bin 버전 (.Final-bin.zip) 내려</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://tramamte.github.io/2018/06/01/variables/</link>
      <pubDate>Fri, 01 Jun 2018 12:35:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/01/variables/</guid>
      <description>Go에서 변수 선언 규칙은 다음과 같다. VarDecl = &amp;#34;var&amp;#34; ( VarSpec | &amp;#34;(&amp;#34; { VarSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . VarSpec = IdentifierList ( Type [ &amp;#34;=&amp;#34; ExpressionList ] | &amp;#34;=&amp;#34; ExpressionList ) . IdentifierList = identifier { &amp;#34;,&amp;#34; identifier } . ExpressionList = Expression { &amp;#34;,&amp;#34; Expression } . 복잡해 보이지만 하나</description>
    </item>
    
    <item>
      <title>Blog 작성 참고자료</title>
      <link>https://tramamte.github.io/2018/05/31/hugo-shortcode/</link>
      <pubDate>Thu, 31 May 2018 22:20:26 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/hugo-shortcode/</guid>
      <description>Awesome Patrick 글 작성을 위해 개인적으로 참고할 내용을 정리한 글입니다. Shortcode 사용법 Markdown 문법과 같이 사용할 수 있는 shortcode { {% shortcode_name %}} **Contents** { {% /shortcode_name %}} Markdown 사용하지 않는 shortcode { {&amp;lt; shortcode_name &amp;gt;}} &amp;lt;b&amp;gt;Contents&amp;lt;/b&amp;gt; { {&amp;lt; /shortcode_name &amp;gt;}}</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://tramamte.github.io/2018/05/31/packages/</link>
      <pubDate>Thu, 31 May 2018 13:05:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/packages/</guid>
      <description>모든 Go 프로그램은 package들로 구성된다. 프로그램은 main package에서 시작한다. 관례상 package 이름은 import 경로의 마지막 element로 한다. Package 작성</description>
    </item>
    
    <item>
      <title>Docker container에서 image 생성</title>
      <link>https://tramamte.github.io/2018/05/31/make-image-from-container/</link>
      <pubDate>Thu, 31 May 2018 12:55:14 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/make-image-from-container/</guid>
      <description>개인적으로 Docker는 이것 저것 다양한 언어나 도구들을 시험하는 용도로도 많이 사용한다. 새로운 것을 보면 한 번 설치해 사용해 본 후 삭제하는 경우도 많은데, 흔</description>
    </item>
    
    <item>
      <title>Docker Root Directory 변경</title>
      <link>https://tramamte.github.io/2018/05/31/docker-change-root/</link>
      <pubDate>Thu, 31 May 2018 12:49:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/docker-change-root/</guid>
      <description>Docker blog에 있는 내용에 따라 Ubuntu에 apt repository를 추가하고 Docker를 설치한 경우 image나 container 등이 저장되는 기본 경로는 /var</description>
    </item>
    
    <item>
      <title>Fun - Semicolons</title>
      <link>https://tramamte.github.io/2018/05/30/fun-semicolons/</link>
      <pubDate>Wed, 30 May 2018 23:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/30/fun-semicolons/</guid>
      <description>Semicolons 과 관련된 잡스러운 글입니다. Go는 lexer가 세미콜론을 자동으로 삽입하기 때문에 쓸 필요가 없다. Go 언어의 장점 중 하나로 얘기되지만, Go를 처음 접하는</description>
    </item>
    
    <item>
      <title>Semicolons</title>
      <link>https://tramamte.github.io/2018/05/29/semicolons/</link>
      <pubDate>Tue, 29 May 2018 12:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/29/semicolons/</guid>
      <description>The Go Programming Language Specification - Semicolons와 Effective Go - Semicolons 부분을 정리했습니다. Go는 C/C++이나 Java처럼 세미콜론(;)을 사용하는 언어이다. 하지만 실제 소</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://tramamte.github.io/2018/05/28/comments/</link>
      <pubDate>Mon, 28 May 2018 23:09:58 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/comments/</guid>
      <description>Go 언어에 대한 문법, 예제, 분석, 다른 언어와의 실행 비교 등을 정리합니다. // single line comment /* multi line comment */</description>
    </item>
    
    <item>
      <title>Hugo Local Server 접속 방법</title>
      <link>https://tramamte.github.io/2018/05/28/hugo-local-server/</link>
      <pubDate>Mon, 28 May 2018 19:06:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/hugo-local-server/</guid>
      <description>테마를 수정하거나 컨텐츠 작성 중 변경 사항을 확인하기 위해서 hugo server를 실행하면 배포하지 않고도 임시버전을 local 에서 확인 가능하다. $ hugo server 그런데 기본 주소</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://tramamte.github.io/about/</link>
      <pubDate>Sat, 26 May 2018 14:24:11 +0900</pubDate>
      
      <guid>https://tramamte.github.io/about/</guid>
      <description>Patrick Yu A question not asked is a door not opened. 이것저것 관심만 많은 잡식성 개발자입니다. 빵을 굽습니다. 빵보다는 빵 만들기를 즐깁니다. 귀촌을 꿈꿉니다. An omnivorous developer, only have interests in variety fields. Bake bread.</description>
    </item>
    
  </channel>
</rss>