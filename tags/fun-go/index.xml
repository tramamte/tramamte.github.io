<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fun-go on Awesome Patrick</title>
    <link>https://tramamte.github.io/tags/fun-go/</link>
    <description>Recent content in Fun-go on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2018 Patrick Yu. All rights reserved.</copyright>
    <lastBuildDate>Tue, 03 Jul 2018 22:35:19 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/tags/fun-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>정수형 상수의 내부 처리</title>
      <link>https://tramamte.github.io/2018/07/03/deep-inside-constants/</link>
      <pubDate>Tue, 03 Jul 2018 22:35:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/03/deep-inside-constants/</guid>
      <description>이 글은 마지막 Commit ID가 4ba55273713bebfbfe0bed9ce196e845c0c69567인 Go 소스 코드를 기준으로 합니다. 함수명, 변</description>
    </item>
    
    <item>
      <title>봉인해제 switch</title>
      <link>https://tramamte.github.io/2018/06/20/fun-switch/</link>
      <pubDate>Wed, 20 Jun 2018 22:40:39 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/20/fun-switch/</guid>
      <description>다시 switch 작성 규칙을 자세히 보면 switch 뒤에도, case 뒤에도 단순히 Expression이 올 수 있다. C/C++, Java에 익숙한 개발자라면 단서를 기대할 것이다. C의 swi</description>
    </item>
    
    <item>
      <title>패키지, 임포트에 대한 심화 학습</title>
      <link>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</link>
      <pubDate>Thu, 14 Jun 2018 18:24:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</guid>
      <description>이제 겨우 타입 정도를 다룬 마당에 굉장히 이른 감은 있지만, 패키지와 임포트가 나왔으니 짚고 넘어가자. Go도 당연히 다른 언어처럼 작성한 코드의 재사용이 가능하다</description>
    </item>
    
    <item>
      <title>별 것 없을 것 같은 상수의 별 것</title>
      <link>https://tramamte.github.io/2018/06/07/fun-constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:32:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/fun-constants/</guid>
      <description>상수의 타입과 한계 명시적이지 않은 듯 명시적인 Go에서 한 것처럼 reflect 패키지를 이용해 타입을 명시하지 않은 상수의 타입에 대해 알아보자. package main import &amp;#34;fmt&amp;#34; import &amp;#34;reflect&amp;#34; func main() { const A =</description>
    </item>
    
    <item>
      <title>명시적이지 않은 듯 명시적인 Go</title>
      <link>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</link>
      <pubDate>Tue, 05 Jun 2018 12:55:40 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</guid>
      <description>변수에서 살펴 본 것처럼 Go는 변수를 선언할 때 초기값을 같이 입력하면 굳이 타입을 명시하지 않아도 된다. var i = 1 f := 3.14 c := 1.0 + 1.0i 그렇다면 이 경우 i, f, c의 타입</description>
    </item>
    
    <item>
      <title>간단하거나, 복잡하거나. 세미콜론</title>
      <link>https://tramamte.github.io/2018/05/30/fun-semicolons/</link>
      <pubDate>Wed, 30 May 2018 23:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/30/fun-semicolons/</guid>
      <description>세미콜론에서 다룬 것처럼 Go는 lexer가 세미콜론을 자동으로 삽입하기 때문에 소스코드에 쓸 일이 거의 없다. Go 언어의 장점 중 하나로 얘기되지만, Go를 처음</description>
    </item>
    
    <item>
      <title>시작 Go</title>
      <link>https://tramamte.github.io/2018/05/28/start-go/</link>
      <pubDate>Mon, 28 May 2018 23:00:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/start-go/</guid>
      <description>Go 토픽은 제가 Go 언어를 공부하면서 정리한 내용들입니다. 그간 주로 C/C++을 사용해 왔던지라 &amp;lsquo;그에 비해 Go는 이렇더라&amp;rsquo;라는 내</description>
    </item>
    
  </channel>
</rss>