<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on Awesome Patrick</title>
    <link>https://tramamte.github.io/tags/syntax/</link>
    <description>Recent content in Syntax on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2018 Patrick Yu&lt;br&gt;All rights reserved.</copyright>
    <lastBuildDate>Tue, 12 Jun 2018 12:05:37 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/tags/syntax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pointers</title>
      <link>https://tramamte.github.io/2018/06/12/pointers/</link>
      <pubDate>Tue, 12 Jun 2018 12:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/pointers/</guid>
      <description>Go의 포인터는 생김과 사용법이 C의 그것과 매우 유사하다. 먼저 포인터에 대한 규정을 살펴보면 다음과 같다. PointerType = &amp;#34;*&amp;#34; BaseType . BaseType = Type . C에서와 같이 타입 앞에 * (as</description>
    </item>
    
    <item>
      <title>Import</title>
      <link>https://tramamte.github.io/2018/06/08/import/</link>
      <pubDate>Fri, 08 Jun 2018 18:58:47 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/08/import/</guid>
      <description>외부 패키지에서 제공하는 기능을 사용하기 위해 Go에서는 import 명령을 사용한다. 작성 규칙은 다음과 같다. ImportDecl = &amp;#34;import&amp;#34; ( ImportSpec | &amp;#34;(&amp;#34; { ImportSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ImportSpec = [ &amp;#34;.&amp;#34; | PackageName ] ImportPath . ImportPath =</description>
    </item>
    
    <item>
      <title>Constants</title>
      <link>https://tramamte.github.io/2018/06/07/constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:20:18 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/constants/</guid>
      <description>상수를 선언하는 방법은 &amp;ldquo;var&amp;rdquo; 대신 &amp;ldquo;const&amp;ldquo;를 사용한다는 점을 제외하면 변수를 선언하는 방법과 유사하다. ConstDecl = &amp;#34;const&amp;#34; ( ConstSpec | &amp;#34;(&amp;#34; { ConstSpec &amp;#34;;&amp;#34; }</description>
    </item>
    
    <item>
      <title>Types</title>
      <link>https://tramamte.github.io/2018/06/05/types/</link>
      <pubDate>Tue, 05 Jun 2018 12:14:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/types/</guid>
      <description>Go의 타입 작성법은 다음과 같다. Type = TypeName | TypeLit | &amp;#34;(&amp;#34; Type &amp;#34;)&amp;#34; . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . 나머지는 차차 보도록 하고, 여기서는 predefined identifier 중 types (</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://tramamte.github.io/2018/06/01/variables/</link>
      <pubDate>Fri, 01 Jun 2018 12:35:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/01/variables/</guid>
      <description>Go에서 변수 선언 규칙은 다음과 같다. VarDecl = &amp;#34;var&amp;#34; ( VarSpec | &amp;#34;(&amp;#34; { VarSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . VarSpec = IdentifierList ( Type [ &amp;#34;=&amp;#34; ExpressionList ] | &amp;#34;=&amp;#34; ExpressionList ) . IdentifierList = identifier { &amp;#34;,&amp;#34; identifier } . ExpressionList = Expression { &amp;#34;,&amp;#34; Expression } . 복잡해 보이지만 하나</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://tramamte.github.io/2018/05/31/packages/</link>
      <pubDate>Thu, 31 May 2018 13:05:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/packages/</guid>
      <description>모든 Go 프로그램은 package들로 구성된다. 프로그램은 main package에서 시작한다. 관례상 package 이름은 import 경로의 마지막 element로 한다. Package 작성</description>
    </item>
    
    <item>
      <title>Semicolons</title>
      <link>https://tramamte.github.io/2018/05/29/semicolons/</link>
      <pubDate>Tue, 29 May 2018 12:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/29/semicolons/</guid>
      <description>The Go Programming Language Specification - Semicolons와 Effective Go - Semicolons 부분을 정리했습니다. Go는 C/C++이나 Java처럼 세미콜론(;)을 사용하는 언어이다. 하지만 실제 소</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://tramamte.github.io/2018/05/28/comments/</link>
      <pubDate>Mon, 28 May 2018 23:09:58 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/comments/</guid>
      <description>Go 언어에 대한 문법, 예제, 분석, 다른 언어와의 실행 비교 등을 정리합니다. // single line comment /* multi line comment */</description>
    </item>
    
  </channel>
</rss>