<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax-go on Awesome Patrick</title>
    <link>https://tramamte.github.io/tags/syntax-go/</link>
    <description>Recent content in Syntax-go on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2018 Patrick Yu. All rights reserved.</copyright>
    <lastBuildDate>Fri, 29 Jun 2018 22:55:08 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/tags/syntax-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>for 반복문</title>
      <link>https://tramamte.github.io/2018/06/29/for-statement/</link>
      <pubDate>Fri, 29 Jun 2018 22:55:08 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/29/for-statement/</guid>
      <description>시작하기에 앞서 한 가지 중요한 사실을 미리 밝히고 넘어가자. Go에는 while이 없다! 반복문은 for 하나로 모두 작성한다. for 반복문의 작성 규칙은 아래와 같다.</description>
    </item>
    
    <item>
      <title>switch 조건문</title>
      <link>https://tramamte.github.io/2018/06/18/switch-statement/</link>
      <pubDate>Mon, 18 Jun 2018 12:40:39 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/18/switch-statement/</guid>
      <description>Go의 switch 조건문은 C/C++이나 Java에 비해 사용법이 굉장히 다양하다. 여기서는 기본 사용법에 대해서만 우선 알아보자. Go의 switch 작성 규칙은 다음과 같다.</description>
    </item>
    
    <item>
      <title>if 조건문</title>
      <link>https://tramamte.github.io/2018/06/15/if-statement/</link>
      <pubDate>Fri, 15 Jun 2018 12:18:07 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/15/if-statement/</guid>
      <description>Go의 if 조건문은 조건에 괄호(())를 쓰지 않아도 된다는 점을 제외하면 C/C++, Java 등 언어의 그것과 유사하다. 물론 조건에 괄호를 쓰는 것도 가능하며, 복잡한 조건인 경</description>
    </item>
    
    <item>
      <title>포인터</title>
      <link>https://tramamte.github.io/2018/06/12/pointers/</link>
      <pubDate>Tue, 12 Jun 2018 12:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/pointers/</guid>
      <description>Go의 포인터는 생김과 사용법이 C의 그것과 매우 유사하다. 먼저 포인터에 대한 규정을 살펴보면 다음과 같다. PointerType = &amp;#34;*&amp;#34; BaseType . BaseType = Type . C에서와 같이 타입 앞에 aste</description>
    </item>
    
    <item>
      <title>임포트</title>
      <link>https://tramamte.github.io/2018/06/08/import/</link>
      <pubDate>Fri, 08 Jun 2018 18:58:47 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/08/import/</guid>
      <description>외부 패키지에서 제공하는 기능을 사용하기 위해 Go에서는 import 명령을 사용한다. 작성 규칙은 다음과 같다. ImportDecl = &amp;#34;import&amp;#34; ( ImportSpec | &amp;#34;(&amp;#34; { ImportSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ImportSpec = [ &amp;#34;.&amp;#34; | PackageName ] ImportPath . ImportPath =</description>
    </item>
    
    <item>
      <title>상수</title>
      <link>https://tramamte.github.io/2018/06/07/constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:20:18 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/constants/</guid>
      <description>상수를 선언하는 방법은 var 대신 const를 사용한다는 점을 제외하면 변수를 선언하는 방법과 유사하다. ConstDecl = &amp;#34;const&amp;#34; ( ConstSpec | &amp;#34;(&amp;#34; { ConstSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ConstSpec = IdentifierList [ [ Type ] &amp;#34;=&amp;#34; ExpressionList ] .</description>
    </item>
    
    <item>
      <title>타입</title>
      <link>https://tramamte.github.io/2018/06/05/types/</link>
      <pubDate>Tue, 05 Jun 2018 12:14:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/types/</guid>
      <description>Go의 타입 작성법은 다음과 같다. Type = TypeName | TypeLit | &amp;#34;(&amp;#34; Type &amp;#34;)&amp;#34; . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . 나머지는 차차 보도록 하고, 여기서는 predefined identifier 중 ty</description>
    </item>
    
    <item>
      <title>변수</title>
      <link>https://tramamte.github.io/2018/06/01/variables/</link>
      <pubDate>Fri, 01 Jun 2018 12:35:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/01/variables/</guid>
      <description>Go에서 변수 선언 규칙은 다음과 같다. VarDecl = &amp;#34;var&amp;#34; ( VarSpec | &amp;#34;(&amp;#34; { VarSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . VarSpec = IdentifierList ( Type [ &amp;#34;=&amp;#34; ExpressionList ] | &amp;#34;=&amp;#34; ExpressionList ) . IdentifierList = identifier { &amp;#34;,&amp;#34; identifier } . ExpressionList = Expression { &amp;#34;,&amp;#34; Expression } . 복잡해 보이지만 하나</description>
    </item>
    
    <item>
      <title>패키지</title>
      <link>https://tramamte.github.io/2018/05/31/packages/</link>
      <pubDate>Thu, 31 May 2018 13:05:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/packages/</guid>
      <description>모든 Go 프로그램은 패키지들로 구성된다. 프로그램은 main 패키지에서 시작한다. 관례상 패키지 이름은 임포트 경로의 마지막 엘리먼트로 한다. 패키지 작성 규정(cl</description>
    </item>
    
    <item>
      <title>세미콜론</title>
      <link>https://tramamte.github.io/2018/05/29/semicolons/</link>
      <pubDate>Tue, 29 May 2018 12:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/29/semicolons/</guid>
      <description>Go는 C/C++이나 Java처럼 세미콜론(;)을 사용하는 언어이다. 하지만 소스코드에서 세미콜론을 볼 일은 거의 없다. Go lexer가 몇 가지 간단한 규칙</description>
    </item>
    
    <item>
      <title>주석</title>
      <link>https://tramamte.github.io/2018/05/28/comments/</link>
      <pubDate>Mon, 28 May 2018 23:09:58 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/comments/</guid>
      <description>// single line comment  /* multi line comment */</description>
    </item>
    
    <item>
      <title>시작 Go</title>
      <link>https://tramamte.github.io/2018/05/28/start-go/</link>
      <pubDate>Mon, 28 May 2018 23:00:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/start-go/</guid>
      <description>Go 토픽은 제가 Go 언어를 공부하면서 정리한 내용들입니다. 그간 주로 C/C++을 사용해 왔던지라 &amp;lsquo;그에 비해 Go는 이렇더라&amp;rsquo;라는 내</description>
    </item>
    
  </channel>
</rss>