<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Awesome Patrick</title>
    <link>https://tramamte.github.io/tags/docker/</link>
    <description>Recent content in docker on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2019 Patrick Yu. All rights reserved.</copyright>
    <lastBuildDate>Tue, 14 May 2019 12:15:24 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 파일로 저장</title>
      <link>https://tramamte.github.io/2019/05/14/dump/</link>
      <pubDate>Tue, 14 May 2019 12:15:24 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/05/14/dump/</guid>
      <description>Image dump $ docker save -o dump_file_name.tar IMAGE $ docker save IMAGE | gzip &amp;gt; dump_file_name.tgz$ docker load -i dump_file_name.tar $ gunzip -c dump_file_name.tgz | docker load Container dump $ docker export CONTAINER_NAME|CONTAINER_ID &amp;gt; dump_file_name.tar$ docker import dump_file_name.tar</description>
    </item>
    
    <item>
      <title>Docker 설정 파일</title>
      <link>https://tramamte.github.io/2019/05/14/config/</link>
      <pubDate>Tue, 14 May 2019 11:04:03 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/05/14/config/</guid>
      <description>Docker 데몬의 설정을 변경하기 위해 systemd service 파일을 직접 수정하는 방법은 해당 데몬을 업데이트할 경우 모두 초기화되기 때문에 불편함이 있다. 위치 /etc/docker/daemon.json 내용 { &amp;#34;data-root&amp;#34;: &amp;#34;/where/you/want&amp;#34; }</description>
    </item>
    
    <item>
      <title>Docker 다이어트</title>
      <link>https://tramamte.github.io/2019/01/25/diet/</link>
      <pubDate>Fri, 25 Jan 2019 12:50:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/01/25/diet/</guid>
      <description>Prune $ docker image prune $ docker container prune $ docker volume prune $ docker network prune Workaround Image $ docker rmi $(docker images --filter &amp;#34;dangling=true&amp;#34; -q --no-trunc) $ docker rmi $(docker images | grep &amp;#34;none&amp;#34; | awk &amp;#39;/ / { print $3 }&amp;#39;) Container $ docker rm $(docker ps -qa --no-trunc --filter &amp;#34;status=exited&amp;#34;) Volume $ docker volume rm $(docker volume ls -qf dangling=true) $ docker volume ls -qf dangling=true</description>
    </item>
    
  </channel>
</rss>