<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Awesome Patrick</title>
    <link>https://tramamte.github.io/</link>
    <description>Recent content on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2019 Patrick Yu. All rights reserved.</copyright>
    <lastBuildDate>Wed, 27 Nov 2019 22:32:04 +0900</lastBuildDate><atom:link href="https://tramamte.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ML? Keep in MInd!</title>
      <link>https://tramamte.github.io/2019/11/27/keep-in-mind/</link>
      <pubDate>Wed, 27 Nov 2019 22:32:04 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/11/27/keep-in-mind/</guid>
      <description>While you are building a machine learning solution, you should answer, or at least keep in mind, the following questions: What question(s) am I trying to answer? Do I think the data collected can answer that question? What is the best way to phrase my question(s) as a machine learning problem? Have I collected enough data to represent the problem I want to solve? What features of the data did</description>
    </item>
    
    <item>
      <title>빅데이터는 거품이다</title>
      <link>https://tramamte.github.io/2019/11/26/bd-is-bubble/</link>
      <pubDate>Tue, 26 Nov 2019 12:36:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/11/26/bd-is-bubble/</guid>
      <description>빅데이터는 거품이다 (김동환 | 페이퍼로드) 中 빅데이터는 방대한 데이터에 대한 통계적 분석을 수행하여 상관관계(correlation)를 찾는다. 이에 반</description>
    </item>
    
    <item>
      <title>NumPy 팬시 인덱싱 값 할당 시 중복 인덱스 처리</title>
      <link>https://tramamte.github.io/2019/11/11/numpy-dup-index/</link>
      <pubDate>Mon, 11 Nov 2019 20:19:59 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/11/11/numpy-dup-index/</guid>
      <description>이 글은 Jupyter Notebook에서 작성했습니다. NumPy 팬시 인덱싱 (fancy indexing)은 배열 요소에 접근하기 위한 인덱스로 단일 스칼라 대신 배열을 전달하는 기능이</description>
    </item>
    
    <item>
      <title>뭘 해야 할지 모를 때</title>
      <link>https://tramamte.github.io/2019/09/19/study/</link>
      <pubDate>Thu, 19 Sep 2019 10:59:15 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/09/19/study/</guid>
      <description>살아 있는 뜨거움 (김미경 | 21세기 북스) 中 아침에 일어났는데 뭘 해야 할지 모르겠으면 공부하는 게 최고다. 우울하고 고립될수록, 뭘 해야 할지 자신이 없을수록 공</description>
    </item>
    
    <item>
      <title>파이썬 스타일 가이드</title>
      <link>https://tramamte.github.io/2019/09/05/pep8/</link>
      <pubDate>Thu, 05 Sep 2019 23:05:59 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/09/05/pep8/</guid>
      <description>전체 내용은 여기 참고 Whitespace 탭이 아닌 스페이스 사용 4 스페이스로 들여쓰기 한 줄의 길이는 79자 이하 표현식을 여러 줄에 나눠 쓸 경우 일반적인 들여쓰기에서 한 수준 추가 함</description>
    </item>
    
    <item>
      <title>Miniconda를 활용한 초경량 Python3, R Jupiter Notebook 구성</title>
      <link>https://tramamte.github.io/2019/09/05/minimal-jupyter/</link>
      <pubDate>Thu, 05 Sep 2019 22:05:33 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/09/05/minimal-jupyter/</guid>
      <description>Miniconda 설치 pass Jupyter notebook 용 환경 생성 $ conda create -n notebook python=3 $ conda activate notebook $ pip install --upgrade pip Jupyter notebook 설치 $ pip install jupyter IRkernel 설치 $ conda install r-irkernel 실행 $ jupyter notebook 최소 용량으로 설치는 되나 필요한 패키지 몇 가지 추가하면</description>
    </item>
    
    <item>
      <title>Outstanding</title>
      <link>https://tramamte.github.io/2019/05/20/outstanding/</link>
      <pubDate>Mon, 20 May 2019 11:38:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/05/20/outstanding/</guid>
      <description>눈에 띄기 위한 필수 조건. 남들이 포기한 곳에서도 찬란히 꽃 피워라! 파에게서 배우다</description>
    </item>
    
    <item>
      <title>Docker 파일로 저장</title>
      <link>https://tramamte.github.io/2019/05/14/dump/</link>
      <pubDate>Tue, 14 May 2019 12:15:24 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/05/14/dump/</guid>
      <description>Image dump $ docker save -o dump_file_name.tar IMAGE $ docker save IMAGE | gzip &amp;gt; dump_file_name.tgz $ docker load -i dump_file_name.tar $ gunzip -c dump_file_name.tgz | docker load Container dump $ docker export CONTAINER_NAME|CONTAINER_ID &amp;gt; dump_file_name.tar $ docker import dump_file_name.tar</description>
    </item>
    
    <item>
      <title>Docker 설정 파일</title>
      <link>https://tramamte.github.io/2019/05/14/config/</link>
      <pubDate>Tue, 14 May 2019 11:04:03 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/05/14/config/</guid>
      <description>Docker 데몬의 설정을 변경하기 위해 systemd service 파일을 직접 수정하는 방법은 해당 데몬을 업데이트할 경우 모두 초기화되기 때문에 불편함이 있다. 위치 /etc/docker/daemon.json 내용 { &amp;#34;data-root&amp;#34;: &amp;#34;/where/you/want&amp;#34; }</description>
    </item>
    
    <item>
      <title>구조체 초기화 방법</title>
      <link>https://tramamte.github.io/2019/03/20/struct-initialize/</link>
      <pubDate>Wed, 20 Mar 2019 22:29:30 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/03/20/struct-initialize/</guid>
      <description>C 구조체 초기화 다음 C 구조체 초기화 방법 중 문법에 위배되는 것은? (단, C99 기준) struct MyStruct { int a; int b; }; // method 1 struct MyStruct m1 = {0, 1}; // method 2 struct MyStruct m2; m2 = (struct MyStruct){0, 1}; // method 3 struct { int</description>
    </item>
    
    <item>
      <title>계속하는 것</title>
      <link>https://tramamte.github.io/2019/02/10/wheel/</link>
      <pubDate>Sun, 10 Feb 2019 23:45:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/02/10/wheel/</guid>
      <description>강한 인내심으로 거리를 쌓아가고 있는 시기인 까닭에, 지금 당장은 시간은 그다지 문제가 되지 않는다. 그저 묵묵히 시간을 들여 거리를 뛰어간다. 빨리 달리고 싶다고 느</description>
    </item>
    
    <item>
      <title>Docker 다이어트</title>
      <link>https://tramamte.github.io/2019/01/25/diet/</link>
      <pubDate>Fri, 25 Jan 2019 12:50:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/01/25/diet/</guid>
      <description>Prune $ docker image prune $ docker container prune $ docker volume prune $ docker network prune Workaround Image $ docker rmi $(docker images --filter &amp;#34;dangling=true&amp;#34; -q --no-trunc) $ docker rmi $(docker images | grep &amp;#34;none&amp;#34; | awk &amp;#39;/ / { print $3 }&amp;#39;) Container $ docker rm $(docker ps -qa --no-trunc --filter &amp;#34;status=exited&amp;#34;) Volume $ docker volume rm $(docker volume ls -qf dangling=true) $ docker volume ls -qf dangling=true</description>
    </item>
    
    <item>
      <title>배열, 슬라이스 그리고 맵</title>
      <link>https://tramamte.github.io/2018/09/05/array-slice-and-map/</link>
      <pubDate>Wed, 05 Sep 2018 23:57:07 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/09/05/array-slice-and-map/</guid>
      <description>Go의 built-in 자료구조인 배열, 슬라이스, 맵에 대해 자세히 살펴보자. 크기 배열, 슬라이스, 맵은 모두 복수의 요소를 저장할 수 있다. 따라서 몇 개의 요소를 가지고 있는</description>
    </item>
    
    <item>
      <title>Docker 동시 다운로드 개수 조절</title>
      <link>https://tramamte.github.io/2018/08/29/docker-pull/</link>
      <pubDate>Wed, 29 Aug 2018 20:46:30 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/29/docker-pull/</guid>
      <description>docker pull 명령으로 이미지를 다운로드하면 기본적으로 동시에 3개의 파일을 동시에 내려받는다. 그런데 네트워크 환경이 좋지 않거나 대역폭이 제한돼 있으면 종종 타임아웃</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 6</title>
      <link>https://tramamte.github.io/2018/08/20/hanks-oven-06/</link>
      <pubDate>Mon, 20 Aug 2018 23:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/20/hanks-oven-06/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 2개월 여에 걸친 기본 공사가 드디어 완료되었다. 이제 외장만 남았는데 언제, 어떻게 할지는 미정. 돔 제작에 한 번 실패</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 5</title>
      <link>https://tramamte.github.io/2018/08/06/hanks-oven-05/</link>
      <pubDate>Mon, 06 Aug 2018 21:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/06/hanks-oven-05/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 황토가 굳은 상판을 사포로 잘 다듬었다. 중간 단계 하나하나를 다 사진으로 남기는 사람들이 존경스럽다. 아무리 신경쓴</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 4</title>
      <link>https://tramamte.github.io/2018/07/31/hanks-oven-04/</link>
      <pubDate>Tue, 31 Jul 2018 22:08:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/31/hanks-oven-04/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 3주 동안 하부 지지대는 튼튼하게 잘 굳었다. 이번에는 상판을 만들 차례. 크기에 맞춰 자른 합판을 올리고 하부 지지대에</description>
    </item>
    
    <item>
      <title>중학교 수학으로 이해하는 RSA</title>
      <link>https://tramamte.github.io/2018/07/25/rsa/</link>
      <pubDate>Wed, 25 Jul 2018 23:18:32 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/25/rsa/</guid>
      <description>한 화면에 모두 표시되지 않는 그림이나 수식은 좌우 스크롤이 가능합니다. 중학교 수학으로 이해하는 시리즈 2탄은 PKI(Public Key Infrastructure)의 근간이 되</description>
    </item>
    
    <item>
      <title>상수에 대한 오해</title>
      <link>https://tramamte.github.io/2018/07/24/constant-misunderstanding/</link>
      <pubDate>Tue, 24 Jul 2018 22:47:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/24/constant-misunderstanding/</guid>
      <description>우선 C/C++에서 상수를 만드는 키워드인 const와 final에 대해 간략히 정리해보자. C/C++ const의 역할 변수의 읽기전용 설정 = 상수화 (C++) 멤버 함수의</description>
    </item>
    
    <item>
      <title>중학교 수학으로 이해하는 디피-헬만 키 교환 (Diffie-Hellman Key Exchange)</title>
      <link>https://tramamte.github.io/2018/07/20/diffie-hellman/</link>
      <pubDate>Fri, 20 Jul 2018 20:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/20/diffie-hellman/</guid>
      <description>한 화면에 모두 표시되지 않는 그림이나 수식은 좌우 스크롤이 가능합니다. 디피-헬만 키 교환은 말 그대로 키를 교환하는 방식을 정의한 것이다. 키는 안전한 통신을 위해</description>
    </item>
    
    <item>
      <title>CSS 개발, Sass &amp; SCSS 소개</title>
      <link>https://tramamte.github.io/2018/07/12/sass-and-scss/</link>
      <pubDate>Thu, 12 Jul 2018 22:56:38 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/12/sass-and-scss/</guid>
      <description>CSS를 개발해? CSS가 개발까지 필요한거였어? 웹 기술을 이용한 프론트엔드 개발에 익숙하지 않은 개발자라면 유사한 의문을 품을 수 있을께다. 지금 이 글을 쓰고</description>
    </item>
    
    <item>
      <title>특수 함수들</title>
      <link>https://tramamte.github.io/2018/07/10/init-and-main/</link>
      <pubDate>Tue, 10 Jul 2018 19:40:25 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/10/init-and-main/</guid>
      <description>본문 중 심볼(symbol)에 대한 내용은 편의상 리눅스 환경에서 빌드한 바이너리를 readelf 명령으로 확인한 결과입니다. C/C++, Java에서 가장 특이한 함수는 누가 뭐래</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 3</title>
      <link>https://tramamte.github.io/2018/07/08/hanks-oven-03/</link>
      <pubDate>Sun, 08 Jul 2018 23:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/08/hanks-oven-03/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 상부 돔을 먼저 만들면서 절실히 깨달은 점 하나. 집은 바닥부터 지어야 한다. 돔을 따로 만들어 놓고 뚜껑처럼 덜렁 들어서</description>
    </item>
    
    <item>
      <title>정수형 상수의 내부 처리</title>
      <link>https://tramamte.github.io/2018/07/03/deep-inside-constants/</link>
      <pubDate>Tue, 03 Jul 2018 22:35:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/03/deep-inside-constants/</guid>
      <description>이 글은 마지막 commit id가 4ba5527&amp;hellip;인 Go 소스 코드를 기준으로 합니다. 함수명, 변수/상수명, 변수/상수값 등은 버전에 따라 다를 수 있습니</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 2</title>
      <link>https://tramamte.github.io/2018/06/26/hanks-oven-02/</link>
      <pubDate>Tue, 26 Jun 2018 19:15:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/26/hanks-oven-02/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 처음 화덕을 만들려고 생각했을 때부터 가장 큰 고민은 상부 돔을 어떻게 만드느냐는 것이었다. 전문가들이야 내화 벽돌을</description>
    </item>
    
    <item>
      <title>Docker container 로그 보기</title>
      <link>https://tramamte.github.io/2018/06/26/docker-log/</link>
      <pubDate>Tue, 26 Jun 2018 12:49:25 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/26/docker-log/</guid>
      <description>컨테이너 내 프로세스가 STDOUT, STDERR로 출력하는 로그 확인 $ docker logs --help Usage: docker logs [OPTIONS] CONTAINER Fetch the logs of a container Options: --details Show extra details provided to logs -f, --follow Follow log output --help Print usage --since string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for</description>
    </item>
    
    <item>
      <title>Docker host - container 간 복사</title>
      <link>https://tramamte.github.io/2018/06/20/docker-copy/</link>
      <pubDate>Wed, 20 Jun 2018 23:15:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/20/docker-copy/</guid>
      <description>$ docker cp --help Usage: docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH Copy files/folders between a container and the local filesystem Options: -L, --follow-link Always follow symbol link in SRC_PATH --help Print usage 현재 사용하고 있는 docker 버전은 17.05.0-ce인데 18.03 버전 기준의 docker doc</description>
    </item>
    
    <item>
      <title>봉인해제 switch</title>
      <link>https://tramamte.github.io/2018/06/20/fun-switch/</link>
      <pubDate>Wed, 20 Jun 2018 22:40:39 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/20/fun-switch/</guid>
      <description>Go의 switch 작성 규칙은 다음과 같다. SwitchStmt = ExprSwitchStmt | TypeSwitchStmt . 이 중 ExprSwitchStmt 규칙은 다음과 같다. ExprSwitchStmt = &amp;#34;switch&amp;#34; [ SimpleStmt &amp;#34;;&amp;#34; ] [ Expression ] &amp;#34;{&amp;#34; { ExprCaseClause } &amp;#34;}&amp;#34; . ExprCaseClause = ExprSwitchCase &amp;#34;:&amp;#34; StatementList . ExprSwitchCase = &amp;#34;case&amp;#34; ExpressionList | &amp;#34;default&amp;#34; . 자세히 보면 switch 뒤에</description>
    </item>
    
    <item>
      <title>패키지, 임포트에 대한 심화 학습</title>
      <link>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</link>
      <pubDate>Thu, 14 Jun 2018 18:24:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</guid>
      <description>Go도 당연히 다른 언어처럼 작성한 코드의 재사용이 가능하다. 쉬이 예상 가능하듯, 패키지를 만들고 이를 임포트해 재사용할 수 있다. 그런데 Go는 C++이나 Ja</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 1</title>
      <link>https://tramamte.github.io/2018/06/12/hanks-oven-01/</link>
      <pubDate>Tue, 12 Jun 2018 12:15:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/hanks-oven-01/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 바닥에 자갈을 깔아둔지라 우선 자갈을 모두 걷어내고 기초 공사 준비 땅을 파고 나무판으로 막아 거푸집 완성. 안에는 땅 파</description>
    </item>
    
    <item>
      <title>jBPM Maven Sample 오류 해결</title>
      <link>https://tramamte.github.io/2018/06/07/resolve-sample-error/</link>
      <pubDate>Thu, 07 Jun 2018 23:11:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/resolve-sample-error/</guid>
      <description>jBPM / Drools 개발환경 구성 방법에 따라 Eclipse에 jBPM/Drools 환경 구성 후 새로운 jBPM 프로젝트를 maven 기반으로 생성하고 실행하면 오류가 발생한다. jBPM 프로젝트 생성 절차 File - New</description>
    </item>
    
    <item>
      <title>별 것 없을 것 같은 상수의 별 것</title>
      <link>https://tramamte.github.io/2018/06/07/fun-constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:32:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/fun-constants/</guid>
      <description>상수의 타입과 한계 명시적이지 않은 듯 명시적인 Go에서 한 것처럼 reflect 패키지를 이용해 타입을 명시하지 않은 상수의 타입에 대해 알아보자. package main import &amp;#34;fmt&amp;#34; import &amp;#34;reflect&amp;#34; func main() { const A =</description>
    </item>
    
    <item>
      <title>Draft, Future 포스트 확인 방법</title>
      <link>https://tramamte.github.io/2018/06/07/draft-future/</link>
      <pubDate>Thu, 07 Jun 2018 12:21:15 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/draft-future/</guid>
      <description>Draft 확인 $ hugo server -D Future 포스트 확인 $ hugo server -F</description>
    </item>
    
    <item>
      <title>MS의 천하통일</title>
      <link>https://tramamte.github.io/2018/06/05/ms-eats-github/</link>
      <pubDate>Tue, 05 Jun 2018 18:05:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/ms-eats-github/</guid>
      <description>뉴스 기사로 볼 때와는 또 다른 충격과 공포! MS 천지를 먹다 개발자의 꿈과 희망 MS MS가 Apple도 먹고, Google도 먹고, 토발즈도 영입하고&amp;hellip</description>
    </item>
    
    <item>
      <title>명시적이지 않은 듯 명시적인 Go</title>
      <link>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</link>
      <pubDate>Tue, 05 Jun 2018 12:55:40 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</guid>
      <description>Go는 변수를 선언할 때 초기값을 같이 입력하면 굳이 타입을 명시하지 않아도 된다. var i = 1 f := 3.14 c := 1.0 + 1.0i 그렇다면 이 경우 i, f, c의 타입은 각각 어떻게 될까? G</description>
    </item>
    
    <item>
      <title>jBPM / Drools 개발환경 구성</title>
      <link>https://tramamte.github.io/2018/06/04/eclipse-install/</link>
      <pubDate>Mon, 04 Jun 2018 13:56:33 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/04/eclipse-install/</guid>
      <description>1. Oracle JDK 설치 Java SE 8 버전 추천 2. Eclipse 설치 Eclipse IDE for Java EE Developers 받아서 압축 해제 3. Runtime 설치 Drools에서 Final 버전 내려받아 적당한 위치에 압축 해제 jBPM에서 *.Final-bin.zip 형태의 final binary</description>
    </item>
    
    <item>
      <title>Blog 작성 참고자료</title>
      <link>https://tramamte.github.io/2018/05/31/hugo-shortcode/</link>
      <pubDate>Thu, 31 May 2018 22:20:26 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/hugo-shortcode/</guid>
      <description>Awesome Patrick 글 작성을 위해 개인적으로 참고할 내용을 정리한 글입니다. Markdown 사용법 1. Task list - [ ] action one - [x] action two action one action two 2. Fraction 5/12 5/12 3. Latex dash Hyphen: tie-in, toll-free, two-third En Dash: May--September, page 147--149 Em Dash: Additional thought---as I&amp;#39;ve done here.</description>
    </item>
    
    <item>
      <title>Docker container에서 image 생성</title>
      <link>https://tramamte.github.io/2018/05/31/make-image-from-container/</link>
      <pubDate>Thu, 31 May 2018 12:55:14 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/make-image-from-container/</guid>
      <description>개인적으로 Docker는 이것 저것 다양한 언어나 도구들을 시험하는 용도로도 많이 사용한다. 새로운 것을 보면 한 번 설치해 사용해 본 후 삭제하는 경우도 많은데, 흔</description>
    </item>
    
    <item>
      <title>Docker Root Directory 변경</title>
      <link>https://tramamte.github.io/2018/05/31/docker-change-root/</link>
      <pubDate>Thu, 31 May 2018 12:49:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/docker-change-root/</guid>
      <description>Docker blog에 있는 내용에 따라 Ubuntu에 apt repository를 추가하고 Docker를 설치한 경우 image나 container 등이 저장되는 기본 경로는 /var</description>
    </item>
    
    <item>
      <title>간단하거나, 복잡하거나. 세미콜론</title>
      <link>https://tramamte.github.io/2018/05/30/fun-semicolons/</link>
      <pubDate>Wed, 30 May 2018 23:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/30/fun-semicolons/</guid>
      <description>Go는 lexer가 세미콜론을 자동으로 삽입하기 때문에 직접 소스코드에 입력할 경우가 거의 없다. Go 언어의 장점 중 하나로 얘기되지만, Go를 처음 접하는, 세미</description>
    </item>
    
    <item>
      <title>Hugo Local Server 접속 방법</title>
      <link>https://tramamte.github.io/2018/05/28/hugo-local-server/</link>
      <pubDate>Mon, 28 May 2018 19:06:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/hugo-local-server/</guid>
      <description>테마를 수정하거나 컨텐츠 작성 중 변경 사항을 확인하기 위해서 hugo server를 실행하면 배포하지 않고도 임시버전을 local에서 확인 가능하다. $ hugo server 그런데</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://tramamte.github.io/about/</link>
      <pubDate>Sat, 26 May 2018 14:24:11 +0900</pubDate>
      
      <guid>https://tramamte.github.io/about/</guid>
      <description>Patrick Yu A question not asked is a door not opened. 이것저것 관심만 많은 잡식성 개발자입니다. 빵을 굽습니다. 빵보다는 빵 만들기를 즐깁니다. 귀촌을 꿈꿉니다. An omnivorous developer, only have interests in variety fields. Bake bread.</description>
    </item>
    
  </channel>
</rss>
