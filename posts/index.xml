<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Awesome Patrick</title>
    <link>https://tramamte.github.io/posts/</link>
    <description>Recent content in Posts on Awesome Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy2018 Patrick Yu. All rights reserved.</copyright>
    <lastBuildDate>Wed, 16 Jan 2019 20:29:00 +0900</lastBuildDate>
    
	<atom:link href="https://tramamte.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>독서실</title>
      <link>https://tramamte.github.io/2019/01/16/now-reading/</link>
      <pubDate>Wed, 16 Jan 2019 20:29:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2019/01/16/now-reading/</guid>
      <description>아주 짧은 세계사 제프리 블레이니 (박중서) | Humainst 청춘의 독서 유시민 | 웅진 지식하우스 철학, 삶을 만나다 강신주 | 이학사</description>
    </item>
    
    <item>
      <title>학습실</title>
      <link>https://tramamte.github.io/2018/12/25/now-studying/</link>
      <pubDate>Tue, 25 Dec 2018 22:16:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/12/25/now-studying/</guid>
      <description>Developement Go jBPM &amp;amp; Drools Data Science &amp;amp; Statistics Introduction to Data Science Essential Math for Data Analysis using Excel Online Probability - The Science of Uncertainty and Data Data Science: Probability</description>
    </item>
    
    <item>
      <title>메서드</title>
      <link>https://tramamte.github.io/2018/12/20/method/</link>
      <pubDate>Thu, 20 Dec 2018 23:22:43 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/12/20/method/</guid>
      <description>Go는 클래스가 없다. What? Go는 객체지향언어가 아니란 말인가? 미리 놀랄 필요는 없다. Go는 클래스가 없는 대신 보다 유연한 방식을 제공한다. 먼저 객체의 멤버 함</description>
    </item>
    
    <item>
      <title>호출 연기</title>
      <link>https://tramamte.github.io/2018/09/20/defer/</link>
      <pubDate>Thu, 20 Sep 2018 22:12:52 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/09/20/defer/</guid>
      <description>Defer는 호출을 연기하는 Go의 독특한 구문 중 하나이다. 호출을 연기한다는 것이 무슨 의미인지는 다음 C 코드를 예로 알아보자. #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define BUF_SIZE 512 int main(int argc, char *argv[]) { FILE*</description>
    </item>
    
    <item>
      <title>배열, 슬라이스 그리고 맵</title>
      <link>https://tramamte.github.io/2018/09/05/array-slice-and-map/</link>
      <pubDate>Wed, 05 Sep 2018 23:57:07 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/09/05/array-slice-and-map/</guid>
      <description>Go의 built-in 자료구조인 배열, 슬라이스, 맵에 대해 좀 더 자세히 살펴보자. 크기 배열, 슬라이스, 맵은 모두 복수의 요소를 저장할 수 있다. 따라서 몇 개의 요소를 가지고</description>
    </item>
    
    <item>
      <title>Docker 동시 다운로드 개수 조절</title>
      <link>https://tramamte.github.io/2018/08/29/docker-pull/</link>
      <pubDate>Wed, 29 Aug 2018 20:46:30 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/29/docker-pull/</guid>
      <description>docker pull 명령으로 이미지를 다운로드하면 기본적으로 동시에 3개의 파일을 동시에 내려받는다. 그런데 네트워크 환경이 좋지 않거나 대역폭이 제한돼 있으면 종종 타임아웃</description>
    </item>
    
    <item>
      <title>맵</title>
      <link>https://tramamte.github.io/2018/08/28/map/</link>
      <pubDate>Tue, 28 Aug 2018 23:43:27 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/28/map/</guid>
      <description>배열이나 슬라이스는 저장된 각 요소에 접근하기 위한 키로 숫자를 사용하는 자료구조이다. 반면 맵은 키로 숫자가 아닌 다양한 타입을 사용할 수 있다. Python의 dict</description>
    </item>
    
    <item>
      <title>슬라이스</title>
      <link>https://tramamte.github.io/2018/08/21/slice/</link>
      <pubDate>Tue, 21 Aug 2018 23:31:31 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/21/slice/</guid>
      <description>슬라이스는 앞서 살펴본 배열과 연관성이 높은 또 하나의 타입이다. 슬라이스의 특징을 간략히 요약하면 다음과 같다. 기반이 되는 배열, 문자열 또는 다른 슬라이스의 요</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 6</title>
      <link>https://tramamte.github.io/2018/08/20/hanks-oven-06/</link>
      <pubDate>Mon, 20 Aug 2018 23:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/20/hanks-oven-06/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 2개월 여에 걸친 기본 공사가 드디어 완료되었다. 이제 외장만 남았는데 언제, 어떻게 할지는 미정. 돔 제작에 한 번 실패</description>
    </item>
    
    <item>
      <title>배열</title>
      <link>https://tramamte.github.io/2018/08/06/array/</link>
      <pubDate>Mon, 06 Aug 2018 23:07:12 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/06/array/</guid>
      <description>배열 역시 타입의 일종이다. 배열 작성 규칙은 다음과 같다. ArrayType = &amp;#34;[&amp;#34; ArrayLength &amp;#34;]&amp;#34; ElementType . ArrayLength = Expression . ElementType = Type . ArrayLength에 대해서는 두 가지 단서가 붙는데, 음수일 수</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 5</title>
      <link>https://tramamte.github.io/2018/08/06/hanks-oven-05/</link>
      <pubDate>Mon, 06 Aug 2018 21:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/08/06/hanks-oven-05/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 황토가 굳은 상판을 사포로 잘 다듬었다. 중간 단계 하나하나를 다 사진으로 남기는 사람들이 존경스럽다. 아무리 신경쓴</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 4</title>
      <link>https://tramamte.github.io/2018/07/31/hanks-oven-04/</link>
      <pubDate>Tue, 31 Jul 2018 22:08:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/31/hanks-oven-04/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 3주 동안 하부 지지대는 튼튼하게 잘 굳었다. 이번에는 상판을 만들 차례. 크기에 맞춰 자른 합판을 올리고 하부 지지대에</description>
    </item>
    
    <item>
      <title>함수 타입과 익명 함수</title>
      <link>https://tramamte.github.io/2018/07/26/function-type-and-anonymous-function/</link>
      <pubDate>Thu, 26 Jul 2018 23:11:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/26/function-type-and-anonymous-function/</guid>
      <description>함수에서는 기본적인 함수 선언 및 호출 방법에 대해서 다뤘다. 해당 글을 시작할 때 함수를 타입으로 사용할 수도 있다고 언급했는데, 이 내용은 구조체 기초에서도 나온다</description>
    </item>
    
    <item>
      <title>중학교 수학으로 이해하는 RSA</title>
      <link>https://tramamte.github.io/2018/07/25/rsa/</link>
      <pubDate>Wed, 25 Jul 2018 23:18:32 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/25/rsa/</guid>
      <description>한 화면에 모두 표시되지 않는 그림이나 수식은 좌우 스크롤이 가능합니다. 중학교 수학으로 이해하는 시리즈 2탄은 PKI(Public Key Infrastructure)의 근간이 되</description>
    </item>
    
    <item>
      <title>상수에 대한 오해</title>
      <link>https://tramamte.github.io/2018/07/24/constant-misunderstanding/</link>
      <pubDate>Tue, 24 Jul 2018 22:47:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/24/constant-misunderstanding/</guid>
      <description>상수에 대해서만 벌써 네 번째 글이다. 상수 별 것 없을 것 같은 상수의 별 것 정수형 상수의 내부 처리 그만큼 Go의 상수는 C/C++이나 Java를 사용했던 개발자가 오</description>
    </item>
    
    <item>
      <title>중학교 수학으로 이해하는 디피-헬만 키 교환 (Diffie-Hellman Key Exchange)</title>
      <link>https://tramamte.github.io/2018/07/20/diffie-hellman/</link>
      <pubDate>Fri, 20 Jul 2018 20:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/20/diffie-hellman/</guid>
      <description>한 화면에 모두 표시되지 않는 그림이나 수식은 좌우 스크롤이 가능합니다. 디피-헬만 키 교환은 말 그대로 키를 교환하는 방식을 정의한 것이다. 키는 안전한 통신을 위해</description>
    </item>
    
    <item>
      <title>구조체 기초</title>
      <link>https://tramamte.github.io/2018/07/15/struct-basic/</link>
      <pubDate>Sun, 15 Jul 2018 20:10:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/15/struct-basic/</guid>
      <description>구조체는 이름을 갖는 엘리먼트들을 묶어 놓은 타입이다. 당연한 얘기를 뭐 대단한 듯 하나 싶겠지만 앞서 다뤘던 기본 타입, 포인터, 함수, 아직 다루지 않은 배열, 슬라</description>
    </item>
    
    <item>
      <title>CSS 개발, Sass &amp; SCSS 소개</title>
      <link>https://tramamte.github.io/2018/07/12/sass-and-scss/</link>
      <pubDate>Thu, 12 Jul 2018 22:56:38 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/12/sass-and-scss/</guid>
      <description>CSS를 개발해? CSS가 개발까지 필요한거였어? 웹 기술을 이용한 프론트엔드 개발에 익숙하지 않은 개발자라면 유사한 의문을 품을 수 있을께다. 지금 이 글을 쓰고</description>
    </item>
    
    <item>
      <title>특수 함수들</title>
      <link>https://tramamte.github.io/2018/07/10/init-and-main/</link>
      <pubDate>Tue, 10 Jul 2018 19:40:25 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/10/init-and-main/</guid>
      <description>본문 중 심볼(symbol)에 대한 내용은 편의상 리눅스 환경에서 빌드한 바이너리를 readelf 명령으로 확인한 결과입니다. C/C++, Java에서 가장 특이한 함수는 누가 뭐래</description>
    </item>
    
    <item>
      <title>함수</title>
      <link>https://tramamte.github.io/2018/07/09/function/</link>
      <pubDate>Mon, 09 Jul 2018 12:50:21 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/09/function/</guid>
      <description>함수를 타입으로 사용하는 등 여러가지 복잡한 용법이 있지만 이 글에서는 기본적인 함수의 선언(declaration)과 정의(definition)에 대해</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 3</title>
      <link>https://tramamte.github.io/2018/07/08/hanks-oven-03/</link>
      <pubDate>Sun, 08 Jul 2018 23:15:00 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/08/hanks-oven-03/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 상부 돔을 먼저 만들면서 절실히 깨달은 점 하나. 집은 바닥부터 지어야 한다. 돔을 따로 만들어 놓고 뚜껑처럼 덜렁 들어서</description>
    </item>
    
    <item>
      <title>정수형 상수의 내부 처리</title>
      <link>https://tramamte.github.io/2018/07/03/deep-inside-constants/</link>
      <pubDate>Tue, 03 Jul 2018 22:35:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/07/03/deep-inside-constants/</guid>
      <description>이 글은 마지막 commit id가 4ba5527&amp;hellip;인 Go 소스 코드를 기준으로 합니다. 함수명, 변수/상수명, 변수/상수값 등은 버전에 따라 다를 수 있습니</description>
    </item>
    
    <item>
      <title>for 반복문</title>
      <link>https://tramamte.github.io/2018/06/29/for-statement/</link>
      <pubDate>Fri, 29 Jun 2018 22:55:08 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/29/for-statement/</guid>
      <description>시작하기에 앞서 한 가지 중요한 사실을 미리 밝히고 넘어가자. Go에는 while이 없다! 반복문은 for 하나로 모두 작성한다. for 반복문의 작성 규칙은 아래와 같다.</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 2</title>
      <link>https://tramamte.github.io/2018/06/26/hanks-oven-02/</link>
      <pubDate>Tue, 26 Jun 2018 19:15:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/26/hanks-oven-02/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 처음 화덕을 만들려고 생각했을 때부터 가장 큰 고민은 상부 돔을 어떻게 만드느냐는 것이었다. 전문가들이야 내화 벽돌을</description>
    </item>
    
    <item>
      <title>Docker container 로그 보기</title>
      <link>https://tramamte.github.io/2018/06/26/docker-log/</link>
      <pubDate>Tue, 26 Jun 2018 12:49:25 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/26/docker-log/</guid>
      <description>컨테이너 내 프로세스가 STDOUT, STDERR로 출력하는 로그 확인 $ docker logs --help Usage: docker logs [OPTIONS] CONTAINER Fetch the logs of a container Options: --details Show extra details provided to logs -f, --follow Follow log output --help Print usage --since string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for</description>
    </item>
    
    <item>
      <title>Docker host - container 간 복사</title>
      <link>https://tramamte.github.io/2018/06/20/docker-copy/</link>
      <pubDate>Wed, 20 Jun 2018 23:15:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/20/docker-copy/</guid>
      <description>$ docker cp --help Usage: docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH Copy files/folders between a container and the local filesystem Options: -L, --follow-link Always follow symbol link in SRC_PATH --help Print usage 현재 사용하고 있는 docker 버전은 17.05.0-ce인데 18.03 버전 기준의 docker doc</description>
    </item>
    
    <item>
      <title>봉인해제 switch</title>
      <link>https://tramamte.github.io/2018/06/20/fun-switch/</link>
      <pubDate>Wed, 20 Jun 2018 22:40:39 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/20/fun-switch/</guid>
      <description>다시 switch 작성 규칙을 자세히 보면 switch 뒤에도, case 뒤에도 단순히 Expression이 올 수 있다. C/C++, Java에 익숙한 개발자라면 단서를 기대할 것이다. C의 swi</description>
    </item>
    
    <item>
      <title>switch 조건문</title>
      <link>https://tramamte.github.io/2018/06/18/switch-statement/</link>
      <pubDate>Mon, 18 Jun 2018 12:40:39 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/18/switch-statement/</guid>
      <description>Go의 switch 조건문은 C/C++이나 Java에 비해 사용법이 굉장히 다양하다. 여기서는 기본 사용법에 대해서만 우선 알아보자. Go의 switch 작성 규칙은 다음과 같다.</description>
    </item>
    
    <item>
      <title>if 조건문</title>
      <link>https://tramamte.github.io/2018/06/15/if-statement/</link>
      <pubDate>Fri, 15 Jun 2018 12:18:07 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/15/if-statement/</guid>
      <description>Go의 if 조건문은 조건에 괄호(())를 쓰지 않아도 된다는 점을 제외하면 C/C++, Java 등 언어의 그것과 유사하다. 물론 조건에 괄호를 쓰는 것도 가능하며, 복잡한 조건인 경</description>
    </item>
    
    <item>
      <title>패키지, 임포트에 대한 심화 학습</title>
      <link>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</link>
      <pubDate>Thu, 14 Jun 2018 18:24:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/14/fun-packages-and-import/</guid>
      <description>이제 겨우 타입 정도를 다룬 마당에 굉장히 이른 감은 있지만, 패키지와 임포트가 나왔으니 짚고 넘어가자. Go도 당연히 다른 언어처럼 작성한 코드의 재사용이 가능하다</description>
    </item>
    
    <item>
      <title>피자 화덕 만들기 1</title>
      <link>https://tramamte.github.io/2018/06/12/hanks-oven-01/</link>
      <pubDate>Tue, 12 Jun 2018 12:15:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/hanks-oven-01/</guid>
      <description>기술이 없으니 몸으로 부딪히는 피자 화덕 제작기 바닥에 자갈을 깔아둔지라 우선 자갈을 모두 걷어내고 기초 공사 준비 땅을 파고 나무판으로 막아 거푸집 완성. 안에는 땅 파</description>
    </item>
    
    <item>
      <title>포인터</title>
      <link>https://tramamte.github.io/2018/06/12/pointers/</link>
      <pubDate>Tue, 12 Jun 2018 12:05:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/12/pointers/</guid>
      <description>Go의 포인터는 생김과 사용법이 C의 그것과 매우 유사하다. 먼저 포인터에 대한 규정을 살펴보면 다음과 같다. PointerType = &amp;#34;*&amp;#34; BaseType . BaseType = Type . C에서와 같이 타입 앞에 aste</description>
    </item>
    
    <item>
      <title>임포트</title>
      <link>https://tramamte.github.io/2018/06/08/import/</link>
      <pubDate>Fri, 08 Jun 2018 18:58:47 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/08/import/</guid>
      <description>외부 패키지에서 제공하는 기능을 사용하기 위해 Go에서는 import 명령을 사용한다. 작성 규칙은 다음과 같다. ImportDecl = &amp;#34;import&amp;#34; ( ImportSpec | &amp;#34;(&amp;#34; { ImportSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ImportSpec = [ &amp;#34;.&amp;#34; | PackageName ] ImportPath . ImportPath =</description>
    </item>
    
    <item>
      <title>jBPM Maven Sample 오류 해결</title>
      <link>https://tramamte.github.io/2018/06/07/resolve-sample-error/</link>
      <pubDate>Thu, 07 Jun 2018 23:11:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/resolve-sample-error/</guid>
      <description>jBPM / Drools 개발환경 구성 방법에 따라 Eclipse에 jBPM/Drools 환경 구성 후 새로운 jBPM 프로젝트를 maven 기반으로 생성하고 실행하면 오류가 발생한다. jBPM 프로젝트 생성 절차 File - New</description>
    </item>
    
    <item>
      <title>별 것 없을 것 같은 상수의 별 것</title>
      <link>https://tramamte.github.io/2018/06/07/fun-constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:32:17 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/fun-constants/</guid>
      <description>상수의 타입과 한계 명시적이지 않은 듯 명시적인 Go에서 한 것처럼 reflect 패키지를 이용해 타입을 명시하지 않은 상수의 타입에 대해 알아보자. package main import &amp;#34;fmt&amp;#34; import &amp;#34;reflect&amp;#34; func main() { const A =</description>
    </item>
    
    <item>
      <title>상수</title>
      <link>https://tramamte.github.io/2018/06/07/constants/</link>
      <pubDate>Thu, 07 Jun 2018 18:20:18 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/constants/</guid>
      <description>상수를 선언하는 방법은 var 대신 const를 사용한다는 점을 제외하면 변수를 선언하는 방법과 유사하다. ConstDecl = &amp;#34;const&amp;#34; ( ConstSpec | &amp;#34;(&amp;#34; { ConstSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . ConstSpec = IdentifierList [ [ Type ] &amp;#34;=&amp;#34; ExpressionList ] .</description>
    </item>
    
    <item>
      <title>Draft, Future 포스트 확인 방법</title>
      <link>https://tramamte.github.io/2018/06/07/draft-future/</link>
      <pubDate>Thu, 07 Jun 2018 12:21:15 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/07/draft-future/</guid>
      <description>Draft 확인 $ hugo server -D Future 포스트 확인 $ hugo server -F</description>
    </item>
    
    <item>
      <title>MS의 천하통일</title>
      <link>https://tramamte.github.io/2018/06/05/ms-eats-github/</link>
      <pubDate>Tue, 05 Jun 2018 18:05:19 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/ms-eats-github/</guid>
      <description>뉴스 기사로 볼 때와는 또 다른 충격과 공포! MS 천지를 먹다 개발자의 꿈과 희망 MS MS가 Apple도 먹고, Google도 먹고, 토발즈도 영입하고&amp;hellip</description>
    </item>
    
    <item>
      <title>명시적이지 않은 듯 명시적인 Go</title>
      <link>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</link>
      <pubDate>Tue, 05 Jun 2018 12:55:40 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/fun-variables-and-types/</guid>
      <description>변수에서 살펴 본 것처럼 Go는 변수를 선언할 때 초기값을 같이 입력하면 굳이 타입을 명시하지 않아도 된다. var i = 1 f := 3.14 c := 1.0 + 1.0i 그렇다면 이 경우 i, f, c의 타입</description>
    </item>
    
    <item>
      <title>타입</title>
      <link>https://tramamte.github.io/2018/06/05/types/</link>
      <pubDate>Tue, 05 Jun 2018 12:14:49 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/05/types/</guid>
      <description>Go의 타입 작성법은 다음과 같다. Type = TypeName | TypeLit | &amp;#34;(&amp;#34; Type &amp;#34;)&amp;#34; . TypeName = identifier | QualifiedIdent . TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType . 나머지는 차차 보도록 하고, 여기서는 predefined identifier 중 ty</description>
    </item>
    
    <item>
      <title>jBPM / Drools 개발환경 구성</title>
      <link>https://tramamte.github.io/2018/06/04/eclipse-install/</link>
      <pubDate>Mon, 04 Jun 2018 13:56:33 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/04/eclipse-install/</guid>
      <description>1. Oracle JDK 설치 Java SE 8 버전 추천 2. Eclipse 설치 Eclipse IDE for Java EE Developers 받아서 압축 해제 3. Runtime 설치 Drools에서 Final 버전 내려받아 적당한 위치에 압축 해제 jBPM에서 *.Final-bin.zip 형태의 final binary</description>
    </item>
    
    <item>
      <title>변수</title>
      <link>https://tramamte.github.io/2018/06/01/variables/</link>
      <pubDate>Fri, 01 Jun 2018 12:35:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/06/01/variables/</guid>
      <description>Go에서 변수 선언 규칙은 다음과 같다. VarDecl = &amp;#34;var&amp;#34; ( VarSpec | &amp;#34;(&amp;#34; { VarSpec &amp;#34;;&amp;#34; } &amp;#34;)&amp;#34; ) . VarSpec = IdentifierList ( Type [ &amp;#34;=&amp;#34; ExpressionList ] | &amp;#34;=&amp;#34; ExpressionList ) . IdentifierList = identifier { &amp;#34;,&amp;#34; identifier } . ExpressionList = Expression { &amp;#34;,&amp;#34; Expression } . 복잡해 보이지만 하나</description>
    </item>
    
    <item>
      <title>Blog 작성 참고자료</title>
      <link>https://tramamte.github.io/2018/05/31/hugo-shortcode/</link>
      <pubDate>Thu, 31 May 2018 22:20:26 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/hugo-shortcode/</guid>
      <description>Awesome Patrick 글 작성을 위해 개인적으로 참고할 내용을 정리한 글입니다. Markdown 사용법 1. Task list - [ ] action one- [x] action two action one action two 2. Fraction 5/12 5&amp;frasl;12 3. Latex dash Hyphen: tie-in, toll-free, two-thirdEn Dash: May--September, page 147--149Em Dash: Additional thought---as I&amp;#39;ve done here. Hyphen: tie-in, toll-free,</description>
    </item>
    
    <item>
      <title>패키지</title>
      <link>https://tramamte.github.io/2018/05/31/packages/</link>
      <pubDate>Thu, 31 May 2018 13:05:57 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/packages/</guid>
      <description>모든 Go 프로그램은 패키지들로 구성된다. 프로그램은 main 패키지에서 시작한다. 관례상 패키지 이름은 임포트 경로의 마지막 엘리먼트로 한다. 패키지 작성 규정(cl</description>
    </item>
    
    <item>
      <title>Docker container에서 image 생성</title>
      <link>https://tramamte.github.io/2018/05/31/make-image-from-container/</link>
      <pubDate>Thu, 31 May 2018 12:55:14 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/make-image-from-container/</guid>
      <description>개인적으로 Docker는 이것 저것 다양한 언어나 도구들을 시험하는 용도로도 많이 사용한다. 새로운 것을 보면 한 번 설치해 사용해 본 후 삭제하는 경우도 많은데, 흔</description>
    </item>
    
    <item>
      <title>Docker Root Directory 변경</title>
      <link>https://tramamte.github.io/2018/05/31/docker-change-root/</link>
      <pubDate>Thu, 31 May 2018 12:49:28 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/31/docker-change-root/</guid>
      <description>Docker blog에 있는 내용에 따라 Ubuntu에 apt repository를 추가하고 Docker를 설치한 경우 image나 container 등이 저장되는 기본 경로는 /var</description>
    </item>
    
    <item>
      <title>간단하거나, 복잡하거나. 세미콜론</title>
      <link>https://tramamte.github.io/2018/05/30/fun-semicolons/</link>
      <pubDate>Wed, 30 May 2018 23:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/30/fun-semicolons/</guid>
      <description>세미콜론에서 다룬 것처럼 Go는 lexer가 세미콜론을 자동으로 삽입하기 때문에 소스코드에 쓸 일이 거의 없다. Go 언어의 장점 중 하나로 얘기되지만, Go를 처음</description>
    </item>
    
    <item>
      <title>세미콜론</title>
      <link>https://tramamte.github.io/2018/05/29/semicolons/</link>
      <pubDate>Tue, 29 May 2018 12:08:20 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/29/semicolons/</guid>
      <description>Go는 C/C++이나 Java처럼 세미콜론(;)을 사용하는 언어이다. 하지만 소스코드에서 세미콜론을 볼 일은 거의 없다. Go lexer가 몇 가지 간단한 규칙</description>
    </item>
    
    <item>
      <title>주석</title>
      <link>https://tramamte.github.io/2018/05/28/comments/</link>
      <pubDate>Mon, 28 May 2018 23:09:58 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/comments/</guid>
      <description>// single line comment /* multi line comment */</description>
    </item>
    
    <item>
      <title>시작 Go</title>
      <link>https://tramamte.github.io/2018/05/28/start-go/</link>
      <pubDate>Mon, 28 May 2018 23:00:10 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/start-go/</guid>
      <description>Go 토픽은 제가 Go 언어를 공부하면서 정리한 내용들입니다. 그간 주로 C/C++을 사용해 왔던지라 &amp;lsquo;그에 비해 Go는 이렇더라&amp;rsquo;라는 내</description>
    </item>
    
    <item>
      <title>Hugo Local Server 접속 방법</title>
      <link>https://tramamte.github.io/2018/05/28/hugo-local-server/</link>
      <pubDate>Mon, 28 May 2018 19:06:37 +0900</pubDate>
      
      <guid>https://tramamte.github.io/2018/05/28/hugo-local-server/</guid>
      <description>테마를 수정하거나 컨텐츠 작성 중 변경 사항을 확인하기 위해서 hugo server를 실행하면 배포하지 않고도 임시버전을 local에서 확인 가능하다. $ hugo server 그런데</description>
    </item>
    
  </channel>
</rss>